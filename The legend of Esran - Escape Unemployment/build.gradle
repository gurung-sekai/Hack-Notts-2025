import org.gradle.api.Project
import org.gradle.api.tasks.compile.JavaCompile

plugins {
    id 'application'
}

static File locateJavaFxLib(Project project) {
    List<File> candidates = [
            project.file("${project.rootDir}/javafx-sdk-21.0.2/lib"),
            project.file("${project.rootDir}/javafx-sdk-25.0.1/lib"),
            project.file("${project.rootDir}/javafx-sdk/lib"),
            project.file("${project.projectDir}/javafx-sdk-21.0.2/lib"),
            project.file("${project.projectDir}/javafx-sdk-25.0.1/lib"),
            project.file("${project.projectDir}/javafx-sdk/lib"),
            project.file("${project.projectDir}/../javafx-sdk-21.0.2/lib"),
            project.file("${project.projectDir}/../javafx-sdk-25.0.1/lib"),
            project.file("${project.projectDir}/../javafx-sdk/lib"),
            project.file("${project.projectDir}/lib/javafx"),
            project.file("${project.rootDir}/lib/javafx")
    ]
    return candidates.find { it.exists() && it.isDirectory() }
}

def javaFxLibDir = locateJavaFxLib(project)
if (javaFxLibDir == null) {
    throw new GradleException("JavaFX SDK jars not found. Place an extracted sdk under one of: " +
            "javafx-sdk-21.0.2/lib, javafx-sdk-25.0.1/lib, javafx-sdk/lib, or lib/javafx relative to the project root.")
}

def isWindowsHost = System.properties['os.name']?.toLowerCase()?.contains('win') ?: false

def javaFxJars = javaFxLibDir.listFiles()?.findAll { it.name.endsWith('.jar') } ?: []
if (javaFxJars.isEmpty()) {
    throw new GradleException("JavaFX SDK directory ${javaFxLibDir} does not contain any .jar files.")
}

dependencies {
    implementation files(javaFxJars)
}

application {
    mainClass = 'Battle.fx.FxMain'
    applicationDefaultJvmArgs = [
            '--module-path', javaFxLibDir.absolutePath,
            '--add-modules', 'javafx.controls'
    ]
}

tasks.register('runGameLauncher', JavaExec) {
    group = 'application'
    description = 'Launches the Swing-based game launcher without any manual IDE setup.'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'launcher.GameLauncher'
    workingDir = project.projectDir
    jvmArgs '--module-path', javaFxLibDir.absolutePath,
            '--add-modules', 'javafx.controls'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

// Ensure all Java executions (run, test) see the JavaFX modules.
[JavaExec, Test].each { taskType ->
    tasks.withType(taskType).configureEach {
        jvmArgs '--module-path', javaFxLibDir.absolutePath,
                '--add-modules', 'javafx.controls'
    }
}

tasks.withType(JavaCompile).configureEach { task ->
    if (!isWindowsHost) {
        return
    }

    def headerDirProvider = project.layout.dir(project.provider {
        new File(System.getProperty('java.io.tmpdir'), "hacknotts-headers/${project.name}/${task.name}")
    })

    doFirst {
        def headerDir = headerDirProvider.get().asFile
        if (headerDir.exists()) {
            project.delete(headerDir)
        }
    }

    options.headerOutputDirectory.set(headerDirProvider)
    task.outputs.dir(headerDirProvider)

    doLast {
        def headerDir = headerDirProvider.get().asFile
        if (headerDir.exists()) {
            if (!project.delete(headerDir)) {
                logger.info("JNI header directory ${headerDir} could not be removed; it will be cleaned on the next run.")
            }
        }
    }
}
